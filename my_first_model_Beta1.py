# -*- coding: utf-8 -*-
"""My_First_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gxETxY-vge7g8Krw2d2GPD_l8duQMzkC

## **Reading the file**
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
read = pd.read_csv("Chennai houseing sale.csv")
read.head()

"""# **Import**"""

# Basic Libraries
import pandas as pd
import numpy as np

# Data Preprocessing
from sklearn.model_selection import train_test_split

# XGBoost Regressor
from xgboost import XGBRegressor

# Model Evaluation
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv("Chennai houseing sale.csv")
df.head()
df.columns

"""# **Modelling**

### Training and Testing
"""

from sklearn.preprocessing import LabelEncoder

# Encode AREA with LabelEncoder (high cardinality)
le = LabelEncoder()
df['AREA_encoded'] = le.fit_transform(df['AREA'])

# Date feature engineering with dayfirst=True
df['BUILD_AGE'] = 2025 - pd.to_datetime(df['DATE_BUILD'], dayfirst=True).dt.year
df['SALE_MONTH'] = pd.to_datetime(df['DATE_SALE'], dayfirst=True).dt.month

# Interaction feature
df['SQFT_x_QS_OVERALL'] = df['INT_SQFT'] * df['QS_OVERALL']

# One-Hot encode the categorical features with limited categories
df = pd.get_dummies(df, columns=['SALE_COND', 'BUILDTYPE', 'UTILITY_AVAIL', 'MZZONE'], drop_first=True)

# Now select all numeric + encoded features
feature_columns = [
    'INT_SQFT',
    'DIST_MAINROAD',
    'N_BEDROOM',
    'N_BATHROOM',
    'N_ROOM',
    'QS_ROOMS',
    'QS_BATHROOM',
    'QS_BEDROOM',
    'QS_OVERALL',
    'AREA_encoded',
    'BUILD_AGE',
    'SALE_MONTH',
    'SQFT_x_QS_OVERALL'
]

# Add all the new one-hot columns automatically
one_hot_cols = [col for col in df.columns if col.startswith(('SALE_COND_', 'BUILDTYPE_', 'UTILITY_AVAIL_', 'MZZONE_'))]
feature_columns.extend(one_hot_cols)

# Prepare feature matrix and target
X = df[feature_columns]
y = df['SALES_PRICE']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = XGBRegressor(random_state=42)

#Training model
model.fit(X_train, y_train)

"""## **Prediction**"""

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print("R-squared:", r2)

"""## **Graph**"""

import matplotlib.pyplot as plt

# Get feature importance scores
importance = model.feature_importances_

# Plot
plt.figure(figsize=(12, max(6, len(X.columns)*0.3)))  # Adjust height per feature
plt.barh(X.columns, importance)
plt.xlabel("Feature Importance")
plt.title("XGBoost Feature Importance")
plt.show()

"""# New Sample House"""

# Your updated new house data with real Chennai location
new_house_raw = {
    'INT_SQFT': 1450,
    'DIST_MAINROAD': 3.2,
    'N_BEDROOM': 3,
    'N_BATHROOM': 2,
    'N_ROOM': 6,
    'QS_ROOMS': 8,
    'QS_BATHROOM': 8,
    'QS_BEDROOM': 8,
    'QS_OVERALL': 8,
    'AREA': 'Velachery',  # Updated to a real Chennai location
    'DATE_BUILD': '10-10-2014',  # Realistic build date
    'DATE_SALE': '01-06-2024',  # Recent sale date
    'SALE_COND': 'Normal Sale',
    'BUILDTYPE': 'House',
    'UTILITY_AVAIL': 'AllPub',
    'MZZONE': 'RH',
}

# Create a DataFrame from the raw data
new_df_raw = pd.DataFrame([new_house_raw])

# Apply the same feature engineering steps as the training data

# Encode AREA with the same LabelEncoder used for training
try:
    new_df_raw['AREA_encoded'] = le.transform(new_df_raw['AREA'])
except ValueError as e:
    print(f"Error encoding AREA: {e}")
    print(f"Known classes for AREA: {list(le.classes_)}")
    raise  # Or handle unseen AREA values as needed

# Feature engineering
new_df_raw['BUILD_AGE'] = 2025 - pd.to_datetime(new_df_raw['DATE_BUILD'], format='%d-%m-%Y').dt.year
new_df_raw['SALE_MONTH'] = pd.to_datetime(new_df_raw['DATE_SALE'], format='%d-%m-%Y').dt.month
new_df_raw['SQFT_x_QS_OVERALL'] = new_df_raw['INT_SQFT'] * new_df_raw['QS_OVERALL']

# One-Hot encode categorical features
new_df = pd.get_dummies(new_df_raw, columns=['SALE_COND', 'BUILDTYPE', 'UTILITY_AVAIL', 'MZZONE'], drop_first=True)

# Reindex to match training data columns
new_df = new_df.reindex(columns=X_train.columns, fill_value=0)

predicted_price = model.predict(new_df)

formatted_price = "â‚¹{:,.2f}".format(predicted_price[0])
print(f"Predicted Price: {formatted_price}")

